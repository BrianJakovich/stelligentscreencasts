{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template to configure chef on an EC2 Instance",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-7f418316" },
      "us-west-1"      : { "AMI" : "ami-951945d0" },
      "us-west-2"      : { "AMI" : "ami-16fd7026" },
      "eu-west-1"      : { "AMI" : "ami-24506250" },
      "sa-east-1"      : { "AMI" : "ami-3e3be423" },
      "ap-southeast-1" : { "AMI" : "ami-74dda626" },
      "ap-northeast-1" : { "AMI" : "ami-dcfa4edd" }
    }
  },

  "Resources" : {

    "Ec2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc-c++"       : [],
                "autoconf"      : [],
                "automake"      : [],
                "libxml2-devel" : [],
                "libxslt-devel" : [],
                "httpd"         : []
              }
            },

            "sources" : {
              "/etc/chef/" : "https://s3.amazonaws.com/StelligentScreencasts/episode2/cookbooks.zip"
            },

            "files" : {
              "/etc/chef/solo.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "file_cache_path File.join(Dir.pwd, 'cache')\n",
                  "cookbook_path File.join(Dir.pwd, 'cookbooks')\n"
                ]]},
                "mode"   : "000555",
                "owner"  : "ec2-user",
                "group"  : "ec2-user"
              },

              "/etc/chef/solo.js" : {
                "source" : "https://s3.amazonaws.com/StelligentScreencasts/episode2/solo.js",
                "mode"   : "000555",
                "owner"  : "ec2-user",
                "group"  : "ec2-user"
              }
            },

            "groups" : {
              "groupOne" : {},
              "groupTwo" : { "gid" : "45" }
            },

            "users" : {
              "myUser" : {
                "groups" : ["groupOne", "groupTwo"],
                "uid" : "50",
                "homeDir" : "/tmp"
              }
            },

            "commands" : {
              "1-chef" : {
                "command" : "chown -R ec2-user:ec2-user chef",
                "cwd" : "/etc/"
              },

              "2-chef" : {
                "command" : "chef-solo -j ./solo.js -c ./solo.rb",
                "cwd" : "/etc/chef"
              }
            },

            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },

      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "Tags": [ { "Key": "Name", "Value": "Jenkins" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Remove Ruby 1.8.7\n",
          "yum erase -y ruby rubygems\n",

          "# Install Ruby 1.9.3\n",
          "yum -y install ruby19-devel\n",

          "# Move Ruby 1.9.3 to Default Ruby\n",
          "ln -s /usr/bin/ruby1.9 /usr/bin/ruby\n",
          "ln -s /usr/bin/gem1.9 /usr/bin/gem\n",

          "# Install Chef\n",
          "wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/i686/chef-11.4.4-2.el6.i686.rpm\n",
          "rpm -Uvh chef-11.4.4-2.el6.i686.rpm\n",

          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r Ec2Instance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "/opt/aws/bin/cfn-signal", " -e 0", " '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Ec2Instance",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "990"
      }
    }
  },

  "Outputs" : {
  }
}
